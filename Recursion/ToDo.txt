Some More Recursive Programs to practice
--------------------------------------------------------------------------
1. factorial
--------------
Write a function factorial which accepts a number and 
returns the factorial of that number. A factorial is 
the product of an integer and all the integers below i
t; e.g., factorial four ( 4! ) is equal to 24, because 
4 * 3 * 2 * 1 equals 24. factorial zero (0!) is always 1.

Examples
---------
factorial(1) // 1
factorial(2) // 2
factorial(4) // 24
factorial(7) // 5040

Program:
----------
public class Exercise {
    public int factorial(int n) {
    // TODO
    if(n==1 || n==0){
        return 1;
    }
    
    return n * factorial(n-1);
  }
}
---------------------------------------------------------------------------
2. product of Array
--------------------
Write a function called productOfArray which takes in an 
array of numbers and returns the product of them all.

Examples
---------
int arr[] = { 1, 2, 3, 4, 5 }; 
productofArray(arr, arr.length); #120

Program
--------
public class Exercise {
    public int productofArray(int A[], int N) 
    { 
    if(N==1){
            return A[N-1];
        }
        return A[N-1] * productofArray(A, N-1);
    
    } 
}
---------------------------------------------------------------------------
3. recursiveRange
------------------
Write a function called recursiveRange which accepts a number
 and adds up all the numbers from 0 to the number passed to 
 the function.

Examples
----------
recursiveRange(6)  // 21
recursiveRange(10) // 55 

Program
--------
public class Exercise {
   public int recursiveRange(int num) {
       if(num==1){
           return 1;
       }
    return num + recursiveRange(num-1);
   } 
}
--------------------------------------------------------------------------
4. fib
---------
Write a recursive function called fib which accepts a number 
and returns the nth number in the Fibonacci sequence. Recall 
that the Fibonacci sequence is the sequence of whole numbers 
0,1, 1, 2, 3, 5, 8, ... which starts with 0 and 1, and where 
every number thereafter is equal to the sum of the previous 
two numbers.

Examples
---------
fib(4) # 3
fib(10) # 55
fib(28) # 317811
fib(35) # 9227465

Program
--------
public class Exercise {
    public int fib(int n) {
        if(n==0)
            return 0;
        if(n==1)
            return 1;
        return fib(n-1) + fib(n-2);
    }
}
-------------------------------------------------------------------------
5. reverse
------------
Write a recursive function called reverse which accepts a 
string and returns a new string in reverse.

Examples
---------
reverse('java') # 'avaj'
reverse('appmillers') # 'srellimppa'

Program
--------
public class Exercise {
    public String reverse(String str)
    {
        if(str.length()==1){
            return (str.charAt(str.length()-1))+"";
        }
        return (str.charAt(str.length()-1))+"" + reverse(str.substring(0, str.length() - 1));
    }
}
-------------------------------------------------------------------------
6. isPalindrome
-----------------
Write a recursive function called isPalindrome which returns 
true if the string passed to it is a palindrome (reads the 
same forward and backward). Otherwise it returns false.

Examples
-----------
isPalindrome('awesome') # false
isPalindrome('foobar') # false
isPalindrome('tacocat') # true
isPalindrome('amanaplanacanalpanama') # true
isPalindrome('amanaplanacanalpandemonium') # false

Program
--------
public class Exercise {
    public  boolean isPalindrome(String s)
    {   
        String rev = reverse(s);
        if(s.equals(rev))
            return true;
        else
            return false;
    }
    
    public String reverse(String str)
    {
        if(str.length()==1){
            return (str.charAt(str.length()-1))+"";
        }
        return (str.charAt(str.length()-1))+"" + reverse(str.substring(0, str.length() - 1));
    }

}
---------------------------------------------------------------------------
7. someRecursive
-----------------
Write a recursive function called someRecursive which accepts 
an array and a callback. The function returns true if a single 
value in the array returns true when passed to the callback. 
Otherwise it returns false.

Examples
---------
someRecursive({1,2,3,4}, isOdd) # true
someRecursive({4,6,8,9}, isOdd) # true
someRecursive({4,6,8}, isOdd) # false

Program
--------
OddFunction.java
------------------
public class OddFunction {
     boolean run(int num) {
         if (num % 2 == 0) { 
             return false; 
             }
        else {
            return true;
        }
    }
}

Exercise.java
--------------
import java.util.Arrays;
public class Exercise {
     public boolean someRecursive(int[] arr, OddFunction odd) {
    if (arr.length == 0 ) {
      return false;
    } else if (odd.run(arr[0]) == false) {
      return someRecursive(Arrays.copyOfRange(arr, 1, arr.length), odd);
    } else {
      return true;
    }
  }
}
-------------------------------------------------------------------------
8. First Uppercase
--------------------
Given a string find its first uppercase letter

Example
---------
Input : appmillerS
Output : S

Program
--------
public class Exercise {
   public static char first(String str) {
        if(str.isEmpty()) {
            return ' ';
        }
        if (Character.isUpperCase(str.charAt(0))) {
            return str.charAt(0);
        }else {
            return first(str.substring(1, str.length()));
        }
    }
}
-------------------------------------------------------------------------
9. capitalizeWord
------------------
Implement a function that capitalizes each word in String.

Example
------------
input: i love java
output : I Love Java

Program
--------
public class Exercise {
public static String capitalizeWord(String str) {
 
        if(str.isEmpty()) {
            return str;
        }
        char chr = str.charAt(str.length()-1);
        if(str.length()==1) {
            return Character.toString(Character.toUpperCase(chr));
        }
        if((str.substring(str.length()-2, str.length()-1).equals(" "))) {
            chr = Character.toUpperCase(chr);
        }
        return capitalizeWord(str.substring(0,str.length()-1))+ Character.toString(chr);
    }
}
------------------------------------------------------------------------------